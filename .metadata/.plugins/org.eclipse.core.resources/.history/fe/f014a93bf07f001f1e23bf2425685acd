/*********************************************
 * OPL 22.1.1.0 Model
 * Author: czj
 * Creation Date: Jul 21, 2024 at 4:01:47 PM
 *********************************************/

using CPLEX;

// Define the transportation service information tuple
// 定义运输服务信息的元组
tuple ServiceInfo {
    string modality;         // Transportation mode (运输方式)
    string origin;           // Origin node (起点)
    string destination;      // Destination node (终点)
    int capacity;            // Transportation capacity (运输容量)
    float departuretime;     // Departure time (出发时间)
    float arrivaltime;       // Arrival time (到达时间)
    float transittime;       // Transit time (运输时间)
    float transitcost;       // Transportation cost (运输成本)
    float carbonemissions;   // Carbon emissions (碳排放量)
}

// Define the goods information tuple
// 定义货物信息的元组
tuple GoodInfo {
    string good;             // Good name or identifier (货物名称或标识)
    string origin;           // Origin node (起点)
    string destination;      // Destination node (终点)
    int capacity;            // Quantity or capacity (数量或容量)
    float departuretime;     // Planned departure time (计划出发时间)
    float arrivaltime;       // Required arrival time (要求到达时间)
    float penalty;           // Overtime penalty per unit time (每单位时间的超时惩罚)
}

// Define sets of services, nodes, modes, and goods
// 定义服务、节点、运输方式和货物的集合
{ServiceInfo} Services = ...; // Set of transportation services (运输服务集合)
setof(string) Nodes = ...;     // Set of all nodes including origins, destinations, and transfer nodes (所有节点集合，包括起点、终点和转运节点)
setof(string) Modes = ...;     // Set of all transportation modes (所有运输方式集合)

{GoodInfo} GoodsDetails = ...; // Set of goods details (货物详细信息集合)
setof(string) Goods = {gd.good | gd in GoodsDetails}; // Set of goods identifiers (货物标识集合)

// Decision variables
// 决策变量
dvar int+ positiveDelay[Goods]; // Positive delay time variable (正延迟时间变量)
dvar boolean useService[Goods][Services]; // Binary variable indicating whether a good uses a service (二进制变量，表示货物是否使用某个服务)

dvar float+ goodArrivalTime[Goods][Nodes];   // Arrival time of each good at each node (每个货物在每个节点的到达时间)
dvar float+ goodDepartureTime[Goods][Nodes]; // Departure time of each good from each node (每个货物从每个节点的离开时间)

// Parameters
// 参数
float timelimit = ...;        // Time limit for CPLEX solver (CPLEX求解器的时间限制)
float epgap = ...;            // Relative MIP gap tolerance for CPLEX solver (CPLEX求解器的相对MIP间隙容忍度)
float disasterimpact = ...;   // Disaster impact factor (灾害影响系数)

// Loading and unloading costs and times indexed by transportation modes
// 按运输方式索引的装卸费用和时间
float LoadingCost[Modes] = [18.0, 18.0, 3.0];       // Loading cost per mode (每种运输方式的装载成本)
float UnloadingCost[Modes] = [18.0, 18.0, 3.0];     // Unloading cost per mode (每种运输方式的卸载成本)
float LoadingTime[Modes] = [1.0, 1.0, 0.0];         // Loading time per mode (每种运输方式的装载时间)
float UnloadingTime[Modes] = [1.0, 1.0, 0.0];       // Unloading time per mode (每种运输方式的卸载时间)

float StorageCostPerHour = 1.0;    // Storage cost per hour (每小时的仓储成本)
float CarbonTaxPerTon = 8.0;       // Carbon tax per ton (每吨的碳税)

// Set CPLEX solver parameters
// 设置CPLEX求解器参数
execute PRE_PROCESSING {
  cplex.tilim = timelimit;
  cplex.epgap = epgap;
}

// Objective function
// 目标函数
minimize 

    // Total transportation cost and carbon emission cost
    // 总运输成本和碳排放成本
    sum(gd in GoodsDetails, s in Services) (
        s.transitcost * useService[gd.good][s] * gd.capacity 
        + s.carbonemissions * useService[gd.good][s] * gd.capacity * CarbonTaxPerTon / 1000
    )
    
    // Total loading and unloading costs
    // 总装卸成本
    + sum(gd in GoodsDetails, s in Services) (
        (LoadingCost[s.modality] + UnloadingCost[s.modality]) * useService[gd.good][s] * gd.capacity
    )
    
    // Total storage costs
    // 总仓储成本
    + sum(gd in GoodsDetails) (
    	StorageCostPerHour * gd.capacity * (
       		max(n in Nodes) (goodArrivalTime[gd.good][n]) 
       		- sum(s in Services) (useService[gd.good][s] * (s.transittime + LoadingTime[s.modality] + UnloadingTime[s.modality]))
       		- gd.departuretime
        )
    )
    
    // Total overtime penalty cost
    // 总超时惩罚成本
  	+ sum(gd in GoodsDetails) gd.penalty * gd.capacity * positiveDelay[gd.good];

// Constraints
// 约束条件
subject to {

    // Flow conservation constraints for goods at nodes
    // 货物在节点处的流量守恒约束
    forall(gd in GoodsDetails) {
        // At the origin node: exactly one service departs from the origin for each good
        // 起点：每个货物在起点正好有一个服务出发
        sum(s in Services: s.origin == gd.origin) useService[gd.good][s] == 1;

        // At the destination node: exactly one service arrives at the destination for each good
        // 终点：每个货物在终点正好有一个服务到达
        sum(s in Services: s.destination == gd.destination) useService[gd.good][s] == 1;

        // At intermediate nodes: the sum of incoming services equals the sum of outgoing services for each good
        // 中间节点：每个货物在中间节点的流入服务数等于流出服务数
        forall(n in Nodes: n != gd.origin && n != gd.destination) {
            sum(s in Services: s.destination == n) useService[gd.good][s] == sum(s in Services: s.origin == n) useService[gd.good][s];
        }
    }

    // Service capacity constraints (non-Truck modes)
    // 服务容量约束（非卡车运输方式）
    forall(s in Services)
        s.modality == "Truck" || sum(gd in GoodsDetails) useService[gd.good][s] * gd.capacity <= s.capacity;

    // Non-negativity constraints for arrival and departure times
    // 到达和离开时间的非负约束
    forall(gd in GoodsDetails, n in Nodes) {
        goodDepartureTime[gd.good][n] >= 0;
        goodArrivalTime[gd.good][n] >= 0;
    }

    // Time constraints for each used service
    // 为每个使用的服务添加时间约束
    forall(gd in GoodsDetails, s in Services) {
        if (s.modality != "Truck") {
            // For non-Truck modes, set departure and arrival times based on service times
            // 对于非卡车方式，基于服务时间设置出发和到达时间
            (useService[gd.good][s] == 1) => 
            goodDepartureTime[gd.good][s.origin] == s.departuretime - LoadingTime[s.modality] &&
            goodArrivalTime[gd.good][s.destination] == s.arrivaltime + UnloadingTime[s.modality] &&
            gd.departuretime <= goodDepartureTime[gd.good][s.origin] &&
            gd.arrivaltime >= goodArrivalTime[gd.good][s.destination];
        } else {
            // For Truck mode, arrival time depends on departure time, transit time, and disaster impact
            // 对于卡车方式，到达时间取决于离开时间、运输时间和灾害影响
            (useService[gd.good][s] == 1) => 
            goodArrivalTime[gd.good][s.destination] >= goodDepartureTime[gd.good][s.origin] + s.transittime * (1 + disasterimpact) + LoadingTime[s.modality] + UnloadingTime[s.modality] &&
            gd.departuretime <= goodDepartureTime[gd.good][s.origin] &&
            gd.arrivaltime >= goodArrivalTime[gd.good][s.destination];
        }
    }

    // Arrival and departure time constraints at nodes when no service is used
    // 当未使用服务时，节点处的到达和离开时间约束
    forall(gd in GoodsDetails, n in Nodes) {
        // If the good does not arrive at node n via any service, set arrival time to zero
        // 如果货物未通过任何服务到达节点n，则将到达时间设为零
        (sum(s in Services: s.destination == n) useService[gd.good][s] == 0) => 
        (goodArrivalTime[gd.good][n] == 0);

        // If the good does not depart from node n via any service, set departure time to zero
        // 如果货物未通过任何服务从节点n出发，则将离开时间设为零
        (sum(s in Services: s.origin == n) useService[gd.good][s] == 0) => 
        (goodDepartureTime[gd.good][n] == 0);
    }

    // Time synchronization constraints between consecutive services
    // 连续服务之间的时间同步约束
    forall(gd in GoodsDetails, s1 in Services, s2 in Services: s1.destination == s2.origin) {
        // When a good uses two consecutive services, ensure proper timing
        // 当货物连续使用两个服务时，确保时间衔接
        (useService[gd.good][s1] == 1 && useService[gd.good][s2] == 1) => 
        goodDepartureTime[gd.good][s2.origin] >= goodArrivalTime[gd.good][s1.destination];
    }

    // Overtime penalty constraints
    // 超时惩罚约束
    forall(gd in GoodsDetails) {
        positiveDelay[gd.good] >= goodArrivalTime[gd.good][gd.destination] - gd.arrivaltime;
    }
}

// Output the transportation plan and cost details
// 输出运输计划和成本细节
execute {
    writeln("Transportation Plan and Overtime Information:");
    // Output the transportation plan and status for each good
    // 输出每个货物的运输计划和状态
    for (var gd in GoodsDetails) {
        writeln("----------------------------------------------------");
        writeln("Good Name (货物名称): ", gd.good);
        writeln("Transported Quantity (运输数量): ", gd.capacity);
        writeln("Origin to Destination (起点到终点): ", gd.origin, " to ", gd.destination);
        writeln("Planned Departure Time (计划出发时间): ", gd.departuretime);
        writeln("Required Arrival Time (要求到达时间): ", gd.arrivaltime);
        writeln("Used Services (使用的服务):");
        for (var s in Services) {
            if (useService[gd.good][s].solutionValue > 0.5) {
                writeln("  - Modality (运输方式): ", s.modality);
                writeln("    From ", s.origin, " to ", s.destination);
                writeln("    Service Departure Time (服务出发时间): ", s.departuretime);
                writeln("    Service Arrival Time (服务到达时间): ", s.arrivaltime);
                writeln("    Good Departure Time at Origin (货物在起点的离开时间): ", goodDepartureTime[gd.good][s.origin].solutionValue);
                writeln("    Good Arrival Time at Destination (货物在终点的到达时间): ", goodArrivalTime[gd.good][s.destination].solutionValue);
                writeln("    Transit Time (运输时间): ", s.transittime);
                writeln("    Transit Cost (运输成本): ", s.transitcost);
            }
        }
        // Check if there is a time violation
        // 检查是否存在超时
        if (positiveDelay[gd.good].solutionValue > 0.0) {
            writeln("Status (状态): Overtime (超时)");
            writeln("  Delay Time (延迟时间): ", positiveDelay[gd.good].solutionValue);
        } else {
            writeln("Status (状态): On Time (准时)");
        }
        // Calculate and output total cost for the good
        // 计算并输出该货物的总成本
        var totalCost = 0.0;
        for (var s in Services) {
            if (useService[gd.good][s].solutionValue > 0.5) {
                totalCost += (s.transitcost + LoadingCost[s.modality] + UnloadingCost[s.modality]) * gd.capacity;
                totalCost += s.carbonemissions * gd.capacity * CarbonTaxPerTon / 1000;
            }
        }
        
        totalCost += gd.penalty * gd.capacity * positiveDelay[gd.good].solutionValue;
        writeln("Total Cost for Good (货物的总成本): ", totalCost);
    }
    // Calculate and output the overall total cost
    // 计算并输出总成本
    var overallTotalCost = cplex.getObjValue();
    writeln("====================================================");
    writeln("Overall Total Cost (总成本): ", overallTotalCost);
}
